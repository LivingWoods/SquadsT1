// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SquadsT1.Persistence;

#nullable disable

namespace SquadsT1.Persistence.Migrations
{
    [DbContext(typeof(SquadsDbContext))]
    partial class SquadsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SquadsT1.Domain.Reservations.Reservation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<int?>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("SessionDayId")
                        .HasColumnType("int");

                    b.Property<int>("SessionType")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SessionDayId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.SessionDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("SessionWeekId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SessionWeekId");

                    b.ToTable("SessionDays");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.SessionWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SessionWeeks");
                });

            modelBuilder.Entity("SquadsT1.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DrugsUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasSignedHouseRules")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrainer")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<bool>("OptedInOnNewsletter")
                        .HasColumnType("bit");

                    b.Property<bool>("OptedInOnWhatsapp")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalIssues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SquadsT1.Domain.Reservations.Reservation", b =>
                {
                    b.HasOne("SquadsT1.Domain.Sessions.Session", "Session")
                        .WithMany("Reservations")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SquadsT1.Domain.Users.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SquadsT1.Domain.Users.User", null)
                        .WithMany("PlannedReservations")
                        .HasForeignKey("UserId1");

                    b.HasOne("SquadsT1.Domain.Users.User", null)
                        .WithMany("PassedReservations")
                        .HasForeignKey("UserId2");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.Session", b =>
                {
                    b.HasOne("SquadsT1.Domain.Sessions.SessionDay", null)
                        .WithMany("Sessions")
                        .HasForeignKey("SessionDayId");

                    b.HasOne("SquadsT1.Domain.Users.User", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.SessionDay", b =>
                {
                    b.HasOne("SquadsT1.Domain.Sessions.SessionWeek", null)
                        .WithMany("SessionDays")
                        .HasForeignKey("SessionWeekId");
                });

            modelBuilder.Entity("SquadsT1.Domain.Users.User", b =>
                {
                    b.HasOne("SquadsT1.Domain.Sessions.Session", null)
                        .WithMany("Waitlist")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.Session", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Waitlist");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.SessionDay", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SquadsT1.Domain.Sessions.SessionWeek", b =>
                {
                    b.Navigation("SessionDays");
                });

            modelBuilder.Entity("SquadsT1.Domain.Users.User", b =>
                {
                    b.Navigation("PassedReservations");

                    b.Navigation("PlannedReservations");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
